version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: tradingbot
      POSTGRES_PASSWORD: tradingbot
      POSTGRES_DB: tradingbot
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nats:
    image: nats:latest
    container_name: nats-server
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["--http_port", "8222"]

  strategy-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: strategy-engine
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
      EXCHANGE_API_KEY: ${EXCHANGE_API_KEY}
      EXCHANGE_SECRET_KEY: ${EXCHANGE_SECRET_KEY}
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - nats
      - postgres

  execution:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: execution
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.services.execution:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8080",
      ]
    depends_on:
      - nats
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro
      - ./data:/app/data

  feature-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: feature-engine
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.services.feed:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8081",
      ]
    depends_on:
      - nats
    ports:
      - "8081:8081"
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro

  ops-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ops-api
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.ops_api_service:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8082",
      ]
    ports:
      - "8082:8082"
    depends_on:
      - nats
      - postgres
    volumes:
      - ./config:/app/config
      - ./data:/app/data

  dash:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dash
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    ports:
      - "8501:8501"
    command: ["streamlit", "run", "dashboard/app.py"]
    depends_on:
      - strategy-engine

  reporter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reporter
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.services.reporter:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8083",
      ]
    depends_on:
      - nats
    ports:
      - "8083:8083"
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro
      - ./data:/app/data

  risk-state:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: risk-state
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-paper}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.services.risk:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8084",
      ]
    depends_on:
      - nats
    ports:
      - "8084:8084"
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro

  replay-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: replay-service
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-replay}
      PYTHONPATH: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.services.replay:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8085",
      ]
    depends_on:
      - nats
    volumes:
      - ./sample_data:/app/sample_data:ro
      - ./src:/app/src
      - ./config:/app/config:ro
    ports:
      - "8085:8085"

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"

volumes:
  postgres_data:
